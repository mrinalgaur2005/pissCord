// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  server Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique
  profileId String

  members Member[]
  channels Channel[]

  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([profileId])
}

enum MemberRole{
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)
  @@index([profileId])

  serverId String
  server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)
  @@index([serverId])

  messages Message[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived Conversation[] @relation("MemberTwo")

  directmessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChannelType{
  TEXT
  AUDIO
  VIDEO
}

model Channel{
  id String @id @default(uuid())
  name String 
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId],references: [id],onDelete: Cascade)
  @@index([profileId])

  serverId String
  server Server @relation(fields: [serverId],references: [id],onDelete: Cascade)
  @@index([serverId])

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message{
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text
  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  channelId String
  channel Channel @relation(fields: [channelId],references: [id],onDelete: Cascade)

  deleted Boolean @default(false)

  @@index([channelId])
  @@index([memberId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation{
  id String @id @default(uuid())

  memberOneId String
  memberOne Member @relation("MemberOne",fields: [memberOneId],references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo Member @relation("MemberTwo",fields: [memberTwoId],references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@index([memberOneId])
  @@index([memberTwoId])

  @@unique([memberOneId,memberTwoId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text
  memberId String
  member Member @relation(fields: [memberId],references: [id],onDelete: Cascade)

  conversationId String
  conversation Conversation @relation(fields: [conversationId],references: [id],onDelete: Cascade)

  deleted Boolean @default(false)

  @@index([conversationId])
  @@index([memberId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}